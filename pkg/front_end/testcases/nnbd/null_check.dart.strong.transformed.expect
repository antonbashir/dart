library;
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  field core::int? field = null;
  synthetic constructor •() → self::Class
    : super core::Object::•()
    ;
  method method() → core::int?
    return this.{self::Class::field}{core::int?};
  operator +(self::Class other) → self::Class
    return new self::Class::•();
}
static method main() → dynamic {
  self::Class? c = new self::Class::•() as{Unchecked} self::Class?;
  c!;
  c{self::Class}!.{self::Class::field}{core::int?};
  c{self::Class}!.{self::Class::field} = 42;
  c{self::Class}!.{self::Class::method}{() → core::int?};
  c{self::Class}!.{self::Class::method}(){() → core::int?};
  c{self::Class}!.{self::Class::field}{core::int?}!.{core::int::toString}(){() → core::String};
  c{self::Class}!.{self::Class::method}(){() → core::int?}!.{core::int::toString}(){() → core::String};
  c{self::Class}!.{self::Class::+}(c{self::Class}){(self::Class) → self::Class};
  c{self::Class}!.{self::Class::+}(c{self::Class}!){(self::Class) → self::Class};
  c{self::Class}.{self::Class::+}(c{self::Class}!){(self::Class) → self::Class};
  c{self::Class}.{self::Class::+}(c{self::Class}){(self::Class) → self::Class}!;
  core::bool? o = true as{Unchecked} core::bool?;
  !o! ?{core::bool} !o{core::bool}! : !!o{core::bool}!!;
  !o{core::bool}! ?{core::bool} (!o{core::bool})! : (!(!o{core::bool})!)!;
}


Extra constant evaluation status:
Evaluated: AsExpression @ org-dartlang-testcase:///null_check.dart:25:18 -> BoolConstant(true)
Extra constant evaluation: evaluated: 71, effectively constant: 1
